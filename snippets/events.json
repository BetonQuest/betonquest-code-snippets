{
  "Give journal Event": {
    "prefix": "givejournal",
    "description": "This event simply gives the player his journal. It acts the same way as /j command would.",
    "body": ["\"givejournal ${1|conditions:, |}\"\n$0"]
  },
  "OPSudo Event": {
    "prefix": "opsudo",
    "description": "This event is similar to `command` event, the only difference is that it will fire a command as the player with temporary OP permissions",
    "body": ["\"opsudo ${1:command}${2| ,\\|nextCommand|} ${3|conditions:, |}\"\n$0"]
  },
  "Global point Event": {
    "prefix": "globalpoint",
    "description": "persistent, static\n\nThis works the same way as the normal point event but instead to manipulating the points for a category of a specific player it manipulates points in a global category. These global categories are player independent, so you could for example add a point to such a global category every time a player does a quest and give some special rewards for the 100th player who does the quest.",
    "body": ["\"globalpoint ${1:category} ${2:amount} ${3|conditions:, |}\"\n$0"]
  },
  "Give experience Event": {
    "prefix": "xp",
    "description": "Gives the specified amount of experience points to the player. If you want to give whole levels to a player add the `level` argument.",
    "body": ["\"xp ${1:amount} ${2| ,level|} ${3|conditions:, |}\"\n$0"]
  },
  "Take Items Event": {
    "prefix": "take",
    "description": "Removes items from player\u2019s inventory or backpack (in that order). If the items aren't quest items don't use `take` event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on NPC\u2019s reaction! Defining instruction string is the same as in give event.  You can also specify `notify` keyword to display a simple message to the player about loosing items.",
    "body": ["\"take ${1:itemID}:${2:amount} ${3|conditions:, |}\"\n$0"]
  },
  "Lightning Event": {
    "prefix": "lightning",
    "description": "static\n\nStrikes a lightning at given location. The only argument is the location.",
    "body": ["\"lightning ${1:x;y;z;world} ${2|conditions:, |}\"\n$0"]
  },
  "Conversation Event": {
    "prefix": "conversation",
    "description": "Starts a conversation at location of the player. The only argument is ID of the conversation. This bypasses the conversation permission!",
    "body": ["\"conversation ${1:conversationID} ${2|conditions:, |}\"\n$0"]
  },
  "Folder Event": {
    "prefix": "folder",
    "description": "persistent, static\n\nIt's something like a container for multiple events. You can use it to clarify your code. It also features optional delay measured in seconds (you can use ticks or minutes if you add `ticks` or `minutes` argument). It is persistent for events marked as persistent, which means that the events will be fired even after the player logs out. Beware though, all conditions are false then the player is offline (even inverted ones), so those events should not be blocked by any conditions! The only required argument is a list of events separated by commas. There are also two optional arguments: `delay:` and `random:`. Delay is a number of seconds and it's optional (leaving it blank is the same as `delay:0`. Random is the amount of events, that will be randomly chosen to fire. If set to 0 or omited, it does nothing (all events will fire).",
    "body": ["\"folder ${1:eventID},${2:eventID}$3 ${4| ,delay:|} ${5| ,ticks,minutes|} ${6| ,random:|} ${7| ,period:|} ${8|conditions:, |}\"\n$0"]
  },
  "Explosion Event": {
    "prefix": "explosion",
    "description": "static\n\nCreates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast\u2019s fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4th attribute) there is location.",
    "body": ["\"explosion ${1|0,1|} ${2|0,1|} ${3:power} ${4:x;y;z;world} ${5|conditions:, |}\"\n$0"]
  },
  "Damage player Event": {
    "prefix": "damage",
    "description": "Damages the player by specified amount of damage. The only argument is a number (can have floating point).",
    "body": ["\"damage ${1:amount} ${2|conditions:, |}\"\n$0"]
  },
  "Notification Event": {
    "prefix": "notify",
    "description": "Trigger a notification using the NotifyIO system. The first arguments are the message to send. A comma seperated list can be provided to an optional `category` tag to use a Notification Category. You can optionally set which NotifyIO to use by providing it with an `io` tag. You can also optionally pass flags in the form of `key`:`value` to provide custom config to the NotifyIO that will override those by the category used.\n\nPlease note that if you don't provide a valid category and haven't defined a default category then you must provide an io flag otherwise the default io (Generally chat) will be used.\n\nPlease refer to the Notification chapter for more details.",
    "body": ["\"notify ${1:message} ${2| ,category:|} ${3| ,io:|} ${4|conditions:, |}\"\n$0"]
  },
  "Kill Event": {
    "prefix": "kill",
    "description": "Kills the player. Nothing else.\n",
    "body": ["\"kill ${1|conditions:, |}\"\n$0"]
  },
  "Teleport Event": {
    "prefix": "teleport",
    "description": "Teleports the player to a specified location, with or without head rotation. It will also end the conversation, if the player has one active. The first and only argument must be location. It's a good idea to use yaw and pitch here.",
    "body": ["\"teleport ${1:x;y;z;world;yaw;pitch} ${2|conditions:, |}\"\n$0"]
  },
  "Title Event": {
    "prefix": "",
    "description": "The title event is deprecated.",
    "body": [""]
  },
  "Objective Event": {
    "prefix": "objective",
    "description": "persistent, static\n\nManages the objectives. Syntax is `objective <action> name`, where `<action>` can be start/add (one of the two), delete/remove or complete/finish. Name is the name of the objective, as defined in objectives.yml.",
    "body": ["\"objective ${1|start,delete,complete|} ${2:objectiveID} ${3|conditions:, |}\"\n$0"]
  },
  "Tag Event": {
    "prefix": "tag",
    "description": "persistent\n\nThis event adds (or removes) a tag to the player. The first argument after event's name must be `add` or `del`. Next goes the tag name. It can't contain spaces (though `_` is fine). Additional tags can be added, separated by commas (without spaces).",
    "body": ["\"tag ${1|add,del|} ${2:tagID}${3| ,\\,nextTagID} ${4|conditions:, |}\"\n$0"]
  },
  "Sudo Event": {
    "prefix": "sudo",
    "description": "This event is similar to `command` event, the only difference is that it will fire a command as the player.",
    "body": ["\"sudo ${1:command}${2| ,\\|nextCommand|} ${3|conditions:, |}\"\n$0"]
  },
  "Chest Give Event": {
    "prefix": "chestgive",
    "description": "persistent, static\n\nThis works the same as `give` event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in `give` event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location.",
    "body": ["\"chestgive ${1:x;y;z;world} ${2:itemID}:${3:amount}${4| ,\\,nextItem|} ${5|conditions:, |}\"\n$0"]
  },
  "Cancel quest Event": {
    "prefix": "cancel",
    "description": "This event works in the same way as a quest canceler in the backpack. Running it is equal to the player clicking on the bone. The only argument is a name of a quest canceler, as defined in main.yml",
    "body": ["\"cancel ${1:canceler} ${2|conditions:, |}\"\n$0"]
  },
  "Door Event": {
    "prefix": "door",
    "description": "persistent, static\n\nThis event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in `lever` event above.",
    "body": ["\"door ${1:x;y;z;world} ${2|on,off,toggle|} ${3|conditions:, |}\"\n$0"]
  },
  "Point Event": {
    "prefix": "point",
    "description": "persistent\n\nGives the player a specified amount of points in a specified category. Amount can be negative if you want to subtract points. You can also use an asterisk to do multiplication (or division, if you use a fraction). First argument after the event name must be a category, and the second one - amount of points to give/take/multiply.",
    "body": ["\"point ${1:category} ${2:amount} ${3|conditions:, |}\"\n$0"]
  },
  "Lever Event": {
    "prefix": "lever",
    "description": "persistent, static\n\nThis event can switch a lever. The first argument is a location and the second one is state: `on`, `off` or `toggle`.",
    "body": ["\"lever ${1:x;y;z;world} ${2| ,on,off,toggle|} ${3|conditions:, |}\"\n$0"]
  },
  "Play sound Event": {
    "prefix": "",
    "description": "The playsound event is deprecated.",
    "body": [""]
  },
  "Party event Event": {
    "prefix": "party",
    "description": "Runs the specified list of events (third argument) for every player in a party. More info about parties in \"Party\" chapter in Reference section.",
    "body": ["\"party ${1:radius} ${2:conditions} ${3:events} ${4|conditions:, |}\"\n$0"]
  },
  "Spawn Mob Event": {
    "prefix": "spawn",
    "description": "persistent, static\n\nSpawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob. The last, third argument is integer for amount of mobs to be spawned. You can also specify `name:` argument, followed by the name of the mob. All `_` characters will be replaced with spaces. You can also mark the spawned mob with a keyword using `marked:` argument. It won't show anywhere, and you can check for only marked mobs in `mobkill` objective.\n\nYou can specify armor which the mob will wear and items it will hold with `h:` (helmet), `c:` (chestplate), `l:` (leggings), `b:` (boots), `m:` (main hand) and `o:` (off hand) optional arguments. These take a single item without amount, as defined in items.yml. You can also add a list of drops with `drops:` argument, followed by a list of items with amounts after colons, separated by commas.",
    "body": ["\"spawn ${1:x;y;z;world} ${2:type} ${3:amount} ${4| ,name:|} ${5| ,marked:|} ${6| ,h:|} ${7| ,c:|} ${8| ,l:|} ${9| ,b:|} ${10| ,m:|} ${11| ,o:|} ${12| ,drops:|} ${13|conditions:, |}\"\n$0"]
  },
  "Clear mobs Event": {
    "prefix": "clear",
    "description": "This event removes all specified mobs from the specified area. The first required argument is a list of mobs (taken from here) separated by commas. Next is location. After that there is the radius around the location (a positive number or a variable). You can also optionally specify `name:` argument, followed by name which removed mobs must have. You can use `marked:` argument to remove only mobs marked in `spawn` event.",
    "body": ["\"clear ${1:types} ${2:x;y;z;world} ${3:radius} ${4| ,name:|} ${5| ,marked:|} ${6|conditions:, |}\"\n$0"]
  },
  "Remove Potion Effect Event": {
    "prefix": "deleffect",
    "description": "Removes the specified potion effects from the player. Use `any` instead of a list of types to remove all potion effects from the player.",
    "body": ["\"deleffect ${1:type}${2| ,\\,nextType|} ${3|conditions:, |}\"\n$0"]
  },
  "Journal Event": {
    "prefix": "journal",
    "description": "Adds or deletes an entry to/from player\u2019s journal. Entries are defined in `journal.yml` The first argument is action (add/del), the second one is name of the entry. You can also use only one argument, `update`, it will simply update the journal without addin any entries. It's useful when you need to update the main page.",
    "body": ["\"journal ${1|add,del|} ${2:entryID} ${3|conditions:, |}\"\n$0"]
  },
  "Scoreboard Event": {
    "prefix": "score",
    "description": "This event works in the same way as `point` event, the only difference is that is uses scoreboards instead of points. You can add, subtract, multiply and divide scores in objectives on the scoreboard. The first argument is the name of the objective, second one is a number. It can be positive for additon, negative for subtraction or prefixed with an asterisk for multiplication. Multiplying by fractions is the same as dividing.",
    "body": ["\"score ${1:scoreboard} ${2:amount} ${3|conditions:, |}\"\n$0"]
  },
  "Set Block Event": {
    "prefix": "setblock",
    "description": "persistent, static\n\nSets a block at given location to specified material. Useful for triggering redstone contraptions. There are two required arguments. First is required, and should be  material's name (List of materials). Second is a location and is also required. Last, optional is `data:` with an integer, which defines block's data value. Default is 0.",
    "body": ["\"setblock ${1:blockSelector} ${2:x;y;z;world} ${3|conditions:, |}\"\n$0"]
  },
  "Run events Event": {
    "prefix": "run",
    "description": "This event allow for specifying multiple instruction strings in one, longer string. Each instruction must be started with `^` character and no other dividers should be used. It's not the same as `folder` condition, because you can specify an instruction string, not an event name. It is also fired on the same tick, not on the next one like in `folder`. Don't use conditions here, it behaves strangely. I'll fix this in 1.9 version.",
    "body": ["\"run ^${1:event} ${2:^nextEvent} ${3|conditions:, |}\"\n$0"]
  },
  "Language Event": {
    "prefix": "language",
    "description": "This event changes player's language to the specified one. There is only one argument, the language name.",
    "body": ["\"language ${1:lang} ${2|conditions:, |}\"\n$0"]
  },
  "Global tag Event": {
    "prefix": "globaltag",
    "description": "persistent, static\n\nWorks the same way as a normal tag event, but instead of setting a tag for one player it sets it globaly for all players.",
    "body": ["\"globaltag ${1|add,del|} ${2:globalTag} ${3|conditions:, |}\"\n$0"]
  },
  "Pick random Event": {
    "prefix": "pickrandom",
    "description": "persistent, static\n\nAnother container for events. It picks one (ore multiple) of the given events and runs it (but only if all conditions are true, if not it will do nothing). You must specify how likely it is that each event is picked by adding the percentage before the events id. By default it picks one event from the list but you can add a `amount:` optional if you want more to be picked. Note that only as many events as specified can be picked and `amount:0` will do nothing.",
    "body": ["\"pickrandom ${1:chance}%${2:eventID},${3:nextChanceAndEvent} ${4| ,amount:|}${5| ,value|} ${6|conditions:, |}\"\n$0"]
  },
  "Message Event": {
    "prefix": "",
    "description": "The message event is deprecated.",
    "body": [""]
  },
  "Command Event": {
    "prefix": "command",
    "description": "persistent, static\n\nRuns specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than `%player%` won't resolve if the event is fired from delayed `folder` and the player is offline now. You can define additional commands by separating them with `|` character. If you want a `|` character then use `\\|`.",
    "body": ["\"command ${1:someCommand}${2| ,\\|nextCommand|} ${3|conditions:, |}\"\n$0"]
  },
  "Give Items Event": {
    "prefix": "give",
    "description": "Gives the player predefined items. They are specified exactly as in `item` condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify `notify` keyword to display a simple message to the player about receiving items.",
    "body": ["\"give ${1:itemID}:${2:amount} ${3|notify} ${4|conditions:, |}\"\n$0"]
  },
  "If else Event": {
    "prefix": "if",
    "description": "This event will check a condition, and based on the outcome it will run the first or second event. The instruction string is `if condition event1 else event2`, where `condition` is a condition ID and `event1` and `event2` are event IDs. `else` keyword is mandatory between events for no practical reason.",
    "body": ["\"if ${1:conditionID} ${2:eventID} else ${3:eventID} ${4|conditions:, |}\"\n$0"]
  },
  "Time Event": {
    "prefix": "time",
    "description": "Sets or adds time. The only argument is time to be set (integer) or time to be added (integer prefixed with +), in 24 hours format. Subtracting time is done by adding more time (if you think of this, it actually makes sense). Minutes can be achieved with floating point.",
    "body": ["\"time +${1:time} ${2|conditions:, |}\"\n$0"]
  },
  "Weather Event": {
    "prefix": "weather",
    "description": "Sets weather. The argument is `sun`, `rain` or `storm`.",
    "body": ["\"weather ${1| ,sun,rain,storm|} ${2|conditions:, |}\"\n$0"]
  },
  "Potion Effect Event": {
    "prefix": "effect",
    "description": "Adds a specified potion effect to player. First argument is potion type. You can find all available types here. Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter `ambient` to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter `hidden`. To hide the icon for the effect add `noicon`.",
    "body": ["\"effect ${1:type} ${2:duration} ${3:level} ${4| ,ambient,hidden|} ${5| ,noicon|} ${6|conditions:, |}\"\n$0"]
  },
  "Compass Event": {
    "prefix": "compass",
    "description": "When you run this event, you can add or remove a compass destination for the player. You may also directly set the players's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is `add`,`del` or `set`, and second one is the name of the target, as defined in main.yml. Note that if you set a target the player will not automatically have it added to their choices.\n\nThe destination must be defined in the main.yml file in `compass` section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items.yml) to be displayed in the backpack.",
    "body": ["\"compass ${1|add,del,set|} ${2:target} ${3|conditions:, |}\"\n$0"]
  },
  "Variable Event": {
    "prefix": "variable",
    "description": "This event has only one purpose - to change variables stored in `variable` objective. The first argument is the ID of a `variable` objective (if you use any other type you will get an error). Second one is the key of the variable and the third is the value. Both can use `%...%` variables. Refer to `variable` objective documentation for information about storing variables.",
    "body": ["\"variable ${1:objectiveID} ${2:key} ${3:value} ${4|conditions:, |}\"\n$0"]
  }
}